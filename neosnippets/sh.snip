snippet     #!
abbr        #!/bin/${...}
alias       shebang
options     head
	#!/bin/${1:sh}
	${0}


snippet     env
abbr        #!/usr/bin/env ${...}
options     head
	#!/usr/bin/env ${1}
	${0}


snippet     shebang-zsh
alias       shebang-zsh
abbr        #!/usr/bin/env zsh
options     head
	#!/usr/bin/env zsh
	${0}


snippet     shebang-sh
abbr        #!/bin/sh
options     head
	#!/bin/bash
	${0}


snippet     shebang-bash
abbr        #!/bin/bash
options     head
	#!/bin/bash
	${0}


snippet     strict
abbr        strict
	set -euo pipefail
	${0}


snippet     case
abbr        case "${1}" in ...
options     head
	case "$${1:{name\}}" in
		${2:pattern*})
			${0}
			;;
		*)
			${3:echo "$$1 Didn't match anything"}
	esac


snippet     if
abbr        if [ ${1} ]; then; ${...}; fi
	if [ ${1:#:condition} ]; then
		${0:TARGET}
	fi


snippet     elif
abbr        elif [ ${1} ]; then; ${...}
	elif [ ${1:#:condition} ]; then
		${0:TARGET}


snippet     el
abbr        else; ${...}
	else
		${0:TARGET}


snippet     for
abbr        for ${1} in ${2}; do; ${...}; done
	for ${1:i} in ${2:#:words}; do
		${0:TARGET}
	done


snippet     while
abbr        while ${1} ; do; ${...}; done
alias       wh
	while ${1:#:condition} ; do
		${0:TARGET}
	done


snippet     until
abbr        until ${1} ; do; ${...}; done
	until ${1:#:condition} ; do
		${0:TARGET}
	done


snippet     tmp
	${1:TMPFILE}=$(mktemp ${2:XXX})
	trap "rm -f '${$1}'" 0               # EXIT
	trap "rm -f '${$1}'; exit 1" 2       # INT
	trap "rm -f '${$1}'; exit 1" 1 15    # HUP TERM
	${0}


snippet     function
alias       func
	${1:#:name}() {
		${0:TARGET}
	}


snippet     match-regexp
abbr        =~
options     head
	if [[ $${1:string} =~ ${2:^regexp.*} ]]; then
		${0}
	fi


snippet     assign
abbr        var-assign
options     head
	${1:name}="${2:something}"


snippet     devnull
alias       dev
abbr        > /dev/null 2>&1
	> /dev/null 2>&1${0}


snippet     info
abbr        [INFO] ...
	info() { printf "\\x1b[1;34m[INFO]\\x1b[0m %s\\\n" "\$1" >&2; }


snippet     warning
alias       warn
abbr        [WARN] ...
	warn() { printf "\\x1b[1;33m[WARN]\\x1b[0m %s\\\n" "\$1" >&2; }


snippet     error
abbr        [ERROR] ...
	error() { printf "\\x1b[1;31m[ERROR]\\x1b[0m %s\\\n" "\$1" >&2; exit 1; }


snippet     type
abbr        type ${1} && { error '...' }
	type ${1:#:command} >/dev/null 2>&1 || { error "$1 command not found"; }${0}


snippet     command-v
abbr        command -v ${1} && { error '...' }
	command -v ${1:#:command} >/dev/null 2>&1 || { error "$1 command not found"; }${0}


snippet     echo-var
alias       var
abbr        echo "var: $var"
	echo "$1: \$${1}"${0}


snippet     check-arg
alias       arg
abbr        if [ \$# -eq \${1} ]; then [FATAL] ...
	if [ $# -eq ${1:#:arg length} ]; then printf "\\x1b[1;31m[ERROR]\\x1b[0m %s\\\n" "${2:#:msg}"; exit 1; fi


snippet     cwd
abbr        CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"${0}


snippet     getopt
	usage() { echo "Usage: \$0 [-s <45|90>] [-p <string>]" 1>&2; exit 1; }

	while getopts ":s:p:" opt; do
	  case "${opt}" in
	    s)
	      s=${OPTARG}
	      ((s == 45 || s == 90)) || usage
	      ;;
	    p)
	      p=${OPTARG}
	      ;;
	    *)
	      usage
	      ;;
	  esac
	done
	shift $((OPTIND-1))

	if [ -z "${s}" ] || [ -z "${p}" ]; then
	  usage
	fi
	${0}


snippet     getopt2
	declare -i argc=0
	declare -a argv=()

	while (( \$# > 0 ))
	do
			case \$1 in
					-*)
							if [[ "\$1" =~ 'n' ]]; then
									nflag='-n'
							fi
							if [[ "\$1" =~ 'l' ]]; then
									lflag='-l'
							fi
							if [[ "\$1" =~ 'p' ]]; then
									pflag='-p'
							fi
							shift
							;;
					*)
							((++argc))
							argv=("\${argv[@]}" "\$1")
							shift
							;;
			esac
	done
	${0}
