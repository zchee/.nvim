# include separate snip for go packages
include go/functions.snip
include go/pragma.snip

# ------------------------------------------------------------------
# doc

snippet     compile-time-check
alias       ctc
abbr        // compile time check
	// compile time check whether the ${1:#:type} implements ${2:#:interface} interface.
	var _ $2 = (*$1)(nil)${0}

snippet     doc:interface
abbr        // $1 implements $2.
	// ${1:#:func} implements ${2:#:interface}.${0}

snippet     doc-string
abbr        // String returns a string representation of the $1.
	// String returns a string representation of the ${1:#:type}.

snippet     doc-error
abbr        // Error implements the error interface.
	// Error implements the error interface.

snippet     doc-json.Marshaler
abbr        // MarshalJSON implements json.Marshaler.
	// MarshalJSON implements json.Marshaler.${0}

snippet     doc-json.Unmarshaler
abbr        // UnmarshalJSON implements json.Unmarshaler.
	// UnmarshalJSON implements json.Unmarshaler.${0}

# ------------------------------------------------------------------
# Built-in

## package
snippet     package
abbr        package ...
	package `expand('%:p:h:t')`${0}

## struct
snippet     struct
abbr        struct {...}
	struct {
		${0}
	}

## return nil shorthand
snippet     retnil
alias       rn
abbr        return nil
	return nil${0}

## nil shorthand
snippet     nil
alias       ni
abbr        nil
	nil ${0}

## add token.EQL operator
snippet     is
alias       is
abbr        is
	== ${0}

## add token.NEQ operator
snippet     not
alias       no
abbr        not
	!= ${0}

## add token.EQL operator nad nil
snippet     isnil
abbr        isni
	== nil {
		${0}
	}

## add token.NEQ operator nad nil
snippet     notnil
abbr        noni
	!= nil {
		${0}
	}

# ------------------------------------------------------------------
# for loop

snippet     for
abbr        for ... { ... }
	for ${1} {
		${0}
	}

# for integer loop
snippet     fori
abbr        for 0..N-1 { ... }
	for ${1:i} := 0; $1 < ${2:N}; $1++ {
		${0}
	}

# for range loop with blank
snippet     forn
abbr        for _, v := range items { ... }
	for _, ${2:v} := range ${1} {
		${0}
	}

# for range loop
snippet     forr
abbr        for k, v := range items { ... }
	for ${2:k}, ${3:v} := range ${1} {
		${0}
	}

# ------------------------------------------------------------------
# fmt

snippet     ff
abbr        fmt.Printf(...)
	fmt.Printf("$1: %#v\n", ${1})

snippet     fl
abbr        fmt.Println(...)
	fmt.Println(${1})

snippet     ft
abbr        fmt.Printf("$1: %T = %v\n", $1)
	fmt.Printf("$1: %T = %#v\n", ${1}, $1)

# Use "github.com/davecgh/go-spew/spew"
snippet     fd
abbr        fmt.Printf("$1: %+s", spew.Sdump(...))
	fmt.Printf("$1: %s\n", spew.Sdump(${1}))

# Use "github.com/k0kubun/pp"
snippet     fp
abbr        fmt.Printf("$1: %+s", pp.Sprintln(...))
	fmt.Printf("$1: %s\n", pp.Sprintln(${1}))

snippet     fdiff
abbr        cmp.Diff(1, 2); fmt.Printf("(+want, -got)", diff)
	if diff := cmp.Diff(${1}, ${2}); diff != "" {
		fmt.Printf("(-got, +want)\n%s\n", diff)
	}

# ------------------------------------------------------------------
# log

# printf
snippet     lf
abbr        log.Printf(...)
	log.Printf("$1: %#v\n", ${1})

snippet     lt
abbr        log.Printf("$1: %T, %v", $1)
	log.Printf("$1: %T => %#v\n", ${1}, $1)

# println
snippet     ll
abbr        log.Println(...)
	log.Println(${1})

# Use "github.com/davecgh/go-spew/spew"
snippet     ld
abbr        log.Printf("$1: %v", spew.Sdump(...))
	log.Printf("$1: %s\n", spew.Sdump(${1}))

snippet     ldiff
abbr        cmp.Diff(1, 2); log.Printf("(+want, -got)", diff)
	if diff := cmp.Diff(${1}, ${2}); diff != "" {
		log.Printf("(-got, +want)\n%s\n", diff)
	}

# debug
snippet     ldf
abbr        log.Debugf("$1: %T, %v", $1)
	log.Debugf("$1: %T => %#v\n", ${1}, $1)

# log.Println 'test'
snippet     test
abbr        log.Println("test")${0}
	log.Println("test")

# ------------------------------------------------------------------
# testing

snippet     tf
abbr        t.Logf(...)
	t.Logf("$1: %#v", ${1})

snippet     tl
abbr        t.Log
	t.Log(${1})

snippet     tt
abbr        t.Logf("%T = %#v", ...)
	t.Logf("$1: %T = %#v", ${1}, $1)

# Use "github.com/davecgh/go-spew/spew"
snippet     td
abbr        t.Logf("$1: %+s", spew.Sdump(...))
	t.Logf("$1: %s", spew.Sdump(${1}))

# Use "github.com/k0kubun/pp"
snippet     tp
abbr        fmt.Printf("$1: %+s", pp.Sprintln(...))
	t.Logf("$1: %+s\n", pp.Sprintln(${1}))

snippet     tgotwant
abbr        t.Fatalf("got %v, want %v", ...)
	if got, want := ${1}, ${2}; got != want {
		t.Fatalf("got %v, want %v", got, want)
	}

snippet     tdiff
abbr        cmp.Diff(1, 2); t.Fatalf("(+want, -got)", diff)
	if diff := cmp.Diff(${1}, ${2}); diff != "" {
		t.Fatalf("(-want +got):\n%s", diff)
	}
	${0}

# ------------------------------------------------------------------
# go-spew

snippet     spewconfig
abbr        spewer = &spew.ConfigState{...}
	var spewer = &spew.ConfigState{
		Indent:                  "  ",
		SortKeys:                true, // maps should be spewed in a deterministic order
		DisablePointerAddresses: true, // don't spew the addresses of pointers
		DisableCapacities:       true, // don't spew capacities of collections
		ContinueOnMethod:        true, // recursion should continue once a custom error or Stringer interface is invoked
		SpewKeys:                true, // if unable to sort map keys then spew keys to strings and sort those
		MaxDepth:                4,    // maximum number of levels to descend into nested data structures.
	}
	${0}

# ------------------------------------------------------------------
# benchmark

snippet     bench
abbr        Benchmark...(b *testing.B) {...}
	func Benchmark${1}(b *testing.B) {
		${0}
		for i := 0; i < b.N; i++ {
			
		}
	}

snippet     benchrun
abbr        Benchmark...(b *testing.B) { b.Run(...) )
	func Benchmark${1}(b *testing.B) {
		${0}
		b.Run("", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				
			}
		})
	}

# ------------------------------------------------------------------
# error handling

# error handling for 'nil' with define the 'err' internally.
# (if) (e)rror != (n)il
snippet     ifen
abbr        if err != nil
	if err != nil {
		${1:return err}
	}${0}

# error handling for any function result with define the 'err' internally.
# (if) (e)rror != (f)n()
snippet     ifef
abbr        if err := fn(...); err != (...)
	if err := ${1:#:func}; err != ${2:nil} {
		${3:return err}
	}${0}

# error handling after the internal definition of 'err'.
# (e)rror != (f)n() (a)fter
snippet     efa
abbr        err != nil {return err}
	; err != nil {
		${1:return err}
	}${0}

# error handling for void(no return value) function.
# (e)rr := (f)n()
snippet     ef
abbr        err := fn(...)
	err := ${1:#:func}
	if err != ${2:nil} {
		${3:return err}
	}${0}

## todo
snippet     todo-implements
abbr        TODO(...) implements...
	`substitute(&commentstring, '%s', '', 'g')`TODO(`get(g:, 'neosnippet_username', system('git config --get github.user --quite'))`): implements${0}
