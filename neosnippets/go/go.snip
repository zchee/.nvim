# include separate snip for go packages
include go/functions.snip
include go/pragma.snip

# ------------------------------------------------------------------
# doc

snippet     compile-time-check
alias       ctc
abbr        // compile time check
	// make sure a ${1:#:type} implements the ${2:#:interface} interface.
	var _ $2 = (*$1)(nil)${0}

snippet     doc:interface
abbr        // $1 implements $2.
	// ${1:#:func} implements ${2:#:interface}.${0}

snippet     doc-string
abbr        // String returns a string representation of the $1.
	// String returns a string representation of the ${1:#:type}.

snippet     doc-error
abbr        // Error implements the error interface.
	// Error implements the error interface.

snippet     doc-json.Marshaler
abbr        // MarshalJSON implements json.Marshaler.
	// MarshalJSON implements json.Marshaler.${0}

snippet     doc-json.Unmarshaler
abbr        // UnmarshalJSON implements json.Unmarshaler.
	// UnmarshalJSON implements json.Unmarshaler.${0}

snippet     represents
alias       rep
abbr        represents a ...
	represents a ${0}

# ------------------------------------------------------------------
# Built-in

## package
snippet     package
abbr        package ...
	package `expand('%:p:h:t')`${0}

## struct
snippet     struct
abbr        struct {...}
	struct {
		${0}
	}

## return nil shorthand
snippet     retnil
alias       rn
abbr        return nil
	return nil${0}

## nil shorthand
snippet     nil
alias       ni
abbr        nil
	nil ${0}

## add token.EQL operator
snippet     is
alias       is
abbr        is
	== ${0}

## add token.NEQ operator
snippet     not
alias       no
abbr        not
	!= ${0}

## add token.EQL operator nad nil
snippet     isnil
abbr        isni
	== nil {
		${0}
	}

## add token.NEQ operator nad nil
snippet     notnil
abbr        noni
	!= nil {
		${0}
	}

# ------------------------------------------------------------------
# for loop

snippet     for
abbr        for ... { ... }
	for ${1} {
		${0}
	}

# for integer loop
snippet     fori
abbr        for 0..N-1 { ... }
	for ${1:i} := 0; $1 < ${2:N}; $1++ {
		${0}
	}

# for range loop with blank
snippet     forn
abbr        for _, v := range items { ... }
	for _, ${2:v} := range ${1} {
		${0}
	}

# for range loop
snippet     forr
abbr        for k, v := range items { ... }
	for ${2:k}, ${3:v} := range ${1} {
		${0}
	}

# ------------------------------------------------------------------
# error handling

# error handling for 'nil' with define the 'err' internally.
# (if) (e)rror != (n)il
snippet     ifen
abbr        if err != nil
	if err != nil {
		${1:return err}
	}${0}

# error handling for any function result with define the 'err' internally.
# (if) (e)rror != (f)n()
snippet     ifef
abbr        if err := fn(...); err != (...)
	if err := ${1:#:func}; err != ${2:nil} {
		${3:return err}
	}${0}

# error handling after the internal definition of 'err'.
# (e)rror != (f)n() (a)fter
snippet     efa
abbr        err != nil {return err}
	; err != nil {
		${1:return err}
	}${0}

# error handling for void(no return value) function.
# (e)rr := (f)n()
snippet     ef
abbr        err := fn(...)
	err := ${1:#:func}
	if err != ${2:nil} {
		${3:return err}
	}${0}

## todo
snippet     todo-implements
abbr        TODO(...) implements...
	`substitute(&commentstring, '%s', '', 'g')`TODO(`get(g:, 'neosnippet_username', system('git config --get github.user --quite'))`): implements${0}
