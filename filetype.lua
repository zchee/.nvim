local dotfiles = vim.fn.expand("$HOME").."/src/github.com/zchee/dotfiles"
local xdg_cache_home = vim.fn.expand("$XDG_CACHE_HOME")

vim.filetype.add({
  extension = {
    ["code-workspace"] = "json",
    tpl                = "gotexttmpl",
    y                  = "goyacc",
    actiongrap         = "json",
    apinotes           = "yaml",
    asm                = "nasm",
    bazel              = "starlark",
    BUILD              = "starlark",
    bzl                = "starlark",
    conf               = "conf",
    defs               = "c",
    dockerignore       = "gitignore",
    editorconfig       = "dosini",
    envrc              = "sh",
    es6                = "javascript",
    gcloudignore       = "gitignore",
    go2                = "go",
    gunk               = "gunk.go",
    hla                = "hla",
    i                  = "swig",
    inc                = "masm",
    jsonc              = "jsonc",
    mm                 = "objcpp",
    pbtxt              = "proto",
    pth                = "python",
    pyd                = "python",
    pyx                = "python",
    replay             = "json",
    s                  = "goasm",
    sb                 = "scheme",
    slide              = "goslide",
    sql                = "mysql",
    swig               = "swig",
    swigcxx            = "swig",
    tbd                = "yaml",
    tfstate            = "teraterm",
    tmpl               = "gotexttmpl",
    ts                 = "typescript",
    vfj                = "jsonc",
    vmoptions          = "conf",
    dockerfile         = "dockerfile",
    -- go = function(path, bufnr)
    --   if vim.bo.ft == "bqfpreview" then
    --     return "barscript"
    --   end
    --   return ""
    -- end,
  },

  filename = {
    [".bash_profile"]    = "sh",
    [".bazelrc"]         = "bzl",
    [".boto"]            = "cfg",
    [".clang-format"]    = "yaml",
    [".clangd"]          = "yaml",
    [".env"]             = "sh",
    [".env.golden"]      = "sh",
    [".env.sample"]      = "sh",
    [".envrc"]           = "sh",
    [".firebaserc"]      = "json",
    [".gunkconfig"]      = "cfg",
    [".markdownlintrc"]  = "json",
    [".pythonrc"]        = "python",
    [".renovaterc"]      = "json5",
    [".renovaterc.json"] = "json5",
    [".tern-config"]     = "json",
    [".yamllint"]        = "yaml",
    ["glide.lock"]       = "yaml",
    ["Gopkg.lock"]       = "toml",
    ["kitty.conf"]       = "kitty",
    ["lsif.json"]        = "json5",
    ["osquery.conf"]     = "json",
    ["poetry.lock"]      = "toml",
    ["proto.lock"]       = "json",
    ["renovate.json"]    = "json5",
    ["renovate.json5"]   = "json5",
    bash_profile         = "sh",
    boto                 = "cfg",
    BUILD                = "bzl",
    manifest             = "json",
    PROJECT              = "yaml",
    WORKSPACE            = "starlark",
  },

  pattern = {
    ["*%.schema%.json"]                        = "jsonschema",
    ["**/*%.go%.tpl"]                              = "gotexttmpl",
    ["**/*kube/config"]                            = "yaml",
    ["**/c++/**/*"]                                = "cpp",
    ["**/db%.xo%.go%.tpl"]                         = "go",
    ["**/funcs%.go%.tpl"]                          = "go",
    ["**/google-cloud-sdk/properties"]             = "cfg",
    ["**/kitty/*%.conf"]                           = "kitty",
    ["**/makedefs/**"]                             = "make",
    [".*git/config"]                               = "gitconfig",
    ["/private/etc/sudoers%.d/*"]                  = "sudoers",
    ["/usr/local/share/zsh/**/*"]                  = "zsh",
    ["[Dd]ockerfile.*[^.vim]"]                     = "dockerfile",
    ["testdata/**/*.go.golden"]                    = "go",
    [dotfiles.."/.config/direnv/direnvrc"]         = "sh",
    [dotfiles.."/.config/gcloud/configurations/*"] = "cfg",
    [dotfiles.."/.config/go/env"]                  = "sh",
    [dotfiles.."/.config/jira%.d/templates/*"]     = "gotexttmpl",
    [dotfiles.."/.config/zsh/**/*"]                = "zsh",
    [xdg_cache_home.."/go/go-build/**/*"]          = "go",
    -- Using an optional priority
    -- [".*&zwj;/etc/foo/.*%.conf"] = { "dosini", { priority = 10 } },
    -- ["README.(%a+)$"] = function(path, bufnr, ext)
    --   if ext == "md" then
    --     return "markdown"
    --   elseif ext == "rst" then
    --     return "rst"
    --   end
    -- end,
  },
})
